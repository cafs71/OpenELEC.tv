From ac8026d4c026a5ebca625d97d0b6f7b11a68fc4f Mon Sep 17 00:00:00 2001
From: mapfau <pfau@peak3d.de>
Date: Thu, 25 Jun 2015 09:35:56 +0200
Subject: [PATCH] optional speedup of ResultQueries using string key reuse

---
 xbmc/dbwrappers/Database.cpp |  3 +-
 xbmc/dbwrappers/Database.h   |  2 +-
 xbmc/dbwrappers/dataset.cpp  | 71 ++++++++++++++++++++++++++++++++++++++------
 xbmc/dbwrappers/dataset.h    | 50 +++++++++++++++++++++++++++----
 xbmc/epg/EpgDatabase.cpp     |  4 +--
 5 files changed, 112 insertions(+), 18 deletions(-)

diff --git a/xbmc/dbwrappers/Database.cpp b/xbmc/dbwrappers/Database.cpp
index 6e189e0..af14d7e 100644
--- a/xbmc/dbwrappers/Database.cpp
+++ b/xbmc/dbwrappers/Database.cpp
@@ -233,7 +233,7 @@ bool CDatabase::ExecuteQuery(const std::string &strQuery)
   return bReturn;
 }
 
-bool CDatabase::ResultQuery(const std::string &strQuery)
+bool CDatabase::ResultQuery(const std::string &strQuery, bool enable_guess /* = false */)
 {
   bool bReturn = false;
 
@@ -244,6 +244,7 @@ bool CDatabase::ResultQuery(const std::string &strQuery)
 
     std::string strPreparedQuery = PrepareSQL(strQuery.c_str());
 
+    m_pDS->enable_guess(enable_guess);
     bReturn = m_pDS->query(strPreparedQuery.c_str());
   }
   catch (...)
diff --git a/xbmc/dbwrappers/Database.h b/xbmc/dbwrappers/Database.h
index 0117ecd..dfb8fd3 100644
--- a/xbmc/dbwrappers/Database.h
+++ b/xbmc/dbwrappers/Database.h
@@ -116,7 +116,7 @@ class CDatabase
    * @param strQuery The query to execute.
    * @return True if the query was executed successfully, false otherwise.
    */
-  bool ResultQuery(const std::string &strQuery);
+  bool ResultQuery(const std::string &strQuery, bool enable_guess = false);
 
   /*!
    * @brief Start a multiple execution queue. Any ExecuteQuery() function
diff --git a/xbmc/dbwrappers/dataset.cpp b/xbmc/dbwrappers/dataset.cpp
index c3306ea..14886e0 100644
--- a/xbmc/dbwrappers/dataset.cpp
+++ b/xbmc/dbwrappers/dataset.cpp
@@ -29,6 +29,7 @@
 #include "dataset.h"
 #include "utils/log.h"
 #include <cstring>
+#include <algorithm>
 
 #ifndef __GNUC__
 #pragma warning (disable:4800)
@@ -93,6 +94,8 @@ Dataset::Dataset():
   frecno = 0;
   fbof = feof = true;
   autocommit = true;
+  guess_enabled = false;
+  current_guess = ~0;
 
   fields_object = new Fields();
 
@@ -110,6 +113,8 @@ Dataset::Dataset(Database *newDb):
   frecno = 0;
   fbof = feof = true;
   autocommit = true;
+  guess_enabled = false;
+  current_guess = ~0;
 
   fields_object = new Fields();
 
@@ -157,7 +162,16 @@ void Dataset::setSqlParams(const char *sqlFrmt, sqlType t, ...) {
   }
 }
 
-
+bool Dataset::enable_guess(bool enable)
+{
+  if(guess_enabled)
+  {
+    guessed_Fields.clear();
+    guessed_Sorter.clear();
+  }
+  guess_enabled = enable;
+  current_guess = ~0;
+};
 
 void Dataset::set_select_sql(const char *sel_sql) {
  select_sql = sel_sql;
@@ -321,25 +335,64 @@ bool Dataset::set_field_value(const char *f_name, const field_value &value) {
   //  return false;
 }
 
+/********* GUESS SECTION START *********/
+bool Dataset::get_guess(const char *f_name) {
+  if(guess_enabled && !(ds_state == dsEdit || ds_state == dsInsert))
+  {
+    if(~current_guess)
+    {
+      unsigned int next(current_guess+1 >= guessed_Fields.size()?0:current_guess+1);
+      if(guessed_Fields[next].strName == f_name) //Yes, our assumption hits.
+      {
+        current_guess=next;
+        return true;
+      }
+    }
+    // guess not found on the expected way, either first row strange retrival order
+    GUESSFIELD tmp(f_name);
+    std::vector<unsigned int>::iterator ins(lower_bound(guessed_Sorter.begin(), guessed_Sorter.end(), tmp, GSS(guessed_Fields)));
+    if(ins == guessed_Sorter.end() || (tmp <  guessed_Fields[*ins])) //new entry
+    {
+      //Insert the new item just behind last retrieved item
+      //In general this should be always end(), but could be different
+      guessed_Sorter.insert(ins, ++current_guess);
+      guessed_Fields.insert(guessed_Fields.begin()+current_guess,tmp);
+
+    }
+    else //entry already existing!
+    {
+      current_guess = *ins;
+      return true;
+    }
+  }
+  return false; //invalid
+}
+/********* GUESS SECTION END *********/
 
 const field_value Dataset::get_field_value(const char *f_name) {
+  //Lets try to reuse a string ->index conversation
+  if(get_guess(f_name))
+    return get_field_value(static_cast<int>(guessed_Fields[current_guess].resultIndex));
+
   const char* name=strstr(f_name, ".");
   if (name) name++;
   if (ds_state != dsInactive) {
     if (ds_state == dsEdit || ds_state == dsInsert){
       for (unsigned int i=0; i < edit_object->size(); i++)
-		if (str_compare((*edit_object)[i].props.name.c_str(), f_name)==0) {
-	  		return (*edit_object)[i].val;
-			}
+        if (str_compare((*edit_object)[i].props.name.c_str(), f_name)==0) {
+          return (*edit_object)[i].val;
+        }
       throw DbErrors("Field not found: %s",f_name);
-       }
+    }
     else
       for (unsigned int i=0; i < fields_object->size(); i++) 
-			if (str_compare((*fields_object)[i].props.name.c_str(), f_name)==0 || (name && str_compare((*fields_object)[i].props.name.c_str(), name)==0)) {
-	  			return (*fields_object)[i].val;
-			}
+        if (str_compare((*fields_object)[i].props.name.c_str(), f_name)==0 || (name && str_compare((*fields_object)[i].props.name.c_str(), name)==0)) {
+          if(guess_enabled)
+            guessed_Fields[current_guess].resultIndex = i;
+          return (*fields_object)[i].val;
+        }
       throw DbErrors("Field not found: %s",f_name);
-       }
+  }
   throw DbErrors("Dataset state is Inactive");
   //field_value fv;
   //return fv;
diff --git a/xbmc/dbwrappers/dataset.h b/xbmc/dbwrappers/dataset.h
index c693726..ffa2c95 100644
--- a/xbmc/dbwrappers/dataset.h
+++ b/xbmc/dbwrappers/dataset.h
@@ -26,7 +26,6 @@
  *
  **********************************************************************/
 
-
 #ifndef _DATASET_H
 #define _DATASET_H
 
@@ -240,8 +239,48 @@ class Dataset  {
    Essentually field idobject must present in the
    result set (select_sql statement) */
 
-
-
+   bool guess_enabled;
+   unsigned int current_guess;
+
+   struct GUESSFIELD    //Struct to store a guessed field access list
+   {
+     GUESSFIELD(const char *name):resultIndex(~0), strName(name){};
+     bool operator < (const GUESSFIELD &other) const {return strName < other.strName;};
+     unsigned int resultIndex;
+     std::string strName;
+   };
+   
+   struct GSS
+   {
+     GSS(const std::vector<GUESSFIELD> &c):c(c){};
+     bool operator()(const unsigned int &v,const GUESSFIELD &o)const
+     {
+       return c[v] < o;
+     };
+     bool operator()(const unsigned int &v1,const unsigned int &v2)const
+     {
+       return c[v1] < c[v2];
+     };
+     bool operator()(const GUESSFIELD &o,const unsigned int &v)const
+     {
+       return o< c[v];
+     };
+   private:
+     const std::vector<GUESSFIELD> &c;
+   }; 
+
+   std::vector<GUESSFIELD> guessed_Fields;
+   std::vector<unsigned int> guessed_Sorter;
+/* We build up a access list which holds a translation of strings to indices.
+   Assumption for the usage is, that rows of a resultset are normally accessed in 
+   always the same field order.
+   We first look into this list and If we don't get a match we use the
+   slower but more flexible field_value access
+   For the case the retrieval is against our assumtion, guessed_soter is
+   to speedup the search   */
+
+   /* Get the column index from a string field_value request */
+   bool get_guess(const char *f_name);
 
 /* Arrays for searching */
 //  StringList names, values;
@@ -287,8 +326,9 @@ class Dataset  {
 /* status active is OK query */
   virtual bool isActive(void) { return active; }
 
-  virtual void setSqlParams(const char *sqlFrmt, sqlType t, ...); 
-
+  virtual void setSqlParams(const char *sqlFrmt, sqlType t, ...);
+  
+  virtual bool enable_guess(bool enable);
 
 /* error handling */
 //  virtual void halt(const char *msg);
diff --git a/xbmc/epg/EpgDatabase.cpp b/xbmc/epg/EpgDatabase.cpp
index 91274f2..a7638a4 100644
--- a/xbmc/epg/EpgDatabase.cpp
+++ b/xbmc/epg/EpgDatabase.cpp
@@ -173,7 +173,7 @@ int CEpgDatabase::Get(CEpgContainer &container)
   int iReturn(-1);
 
   std::string strQuery = PrepareSQL("SELECT idEpg, sName, sScraperName FROM epg;");
-  if (ResultQuery(strQuery))
+  if (ResultQuery(strQuery, true))
   {
     iReturn = 0;
 
@@ -205,7 +205,7 @@ int CEpgDatabase::Get(CEpg &epg)
   int iReturn(-1);
 
   std::string strQuery = PrepareSQL("SELECT * FROM epgtags WHERE idEpg = %u;", epg.EpgID());
-  if (ResultQuery(strQuery))
+  if (ResultQuery(strQuery, true))
   {
     iReturn = 0;
     try
